from django.db import models
from django.contrib.auth.models import User
from django.conf import settings

class Building(models.Model):
    name = models.CharField(max_length=120)

    def __str__(self):
        return self.name

class RoomType(models.Model):
    name = models.CharField(max_length=120)  # —Å–ø–æ—Ä—Ç–∑–∞–ª, –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –∏ —Ç.–¥.

    def __str__(self):
        return self.name

class Room(models.Model):
    building = models.ForeignKey(Building, on_delete=models.PROTECT, related_name="rooms")
    name = models.CharField(max_length=50)            # ‚Ññ –∫–∞–±–∏–Ω–µ—Ç–∞
    capacity = models.PositiveIntegerField(default=0) # –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    computers = models.PositiveIntegerField(default=0)
    room_type = models.ForeignKey(RoomType, on_delete=models.SET_NULL, null=True, blank=True)

    class Meta:
        unique_together = ("building", "name")

    def __str__(self):
        return f"{self.building} ¬∑ {self.name}"

class LessonType(models.Model):
    name = models.CharField(max_length=50)  # –ª–µ–∫—Ü–∏—è, –ø—Ä–∞–∫—Ç–∏–∫–∞, –∑–∞—á—ë—Ç, —ç–∫–∑–∞–º–µ–Ω

    def __str__(self):
        return self.name

class Discipline(models.Model):
    title = models.CharField(max_length=200)

    # üëá –ù–æ–≤—ã–µ –ø–æ–ª—è
    DELIVERY_CHOICES = [
        ("in_person", "–û—á–Ω–∞—è"),
        ("remote", "–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è"),
        ("mixed", "–°–º–µ—à–∞–Ω–Ω–∞—è"),  # –º–æ–∂–Ω–æ –∏ —Ç–∞–∫, –∏ —Ç–∞–∫
    ]
    delivery_mode = models.CharField(max_length=16, choices=DELIVERY_CHOICES, default="in_person")

    default_lesson_type = models.ForeignKey(
        "LessonType", null=True, blank=True, on_delete=models.SET_NULL,
        help_text="–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ª–µ–∫—Ü–∏—è/–ø—Ä–∞–∫—Ç–∏–∫–∞/–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è –∏ —Ç.–¥.)"
    )

    required_room_type = models.ForeignKey(
        "RoomType", null=True, blank=True, on_delete=models.SET_NULL,
        help_text="–ï—Å–ª–∏ –∑–∞–¥–∞–Ω, –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞"
    )

    requires_computers = models.BooleanField(
        default=False,
        help_text="–¢—Ä–µ–±—É—é—Ç—Å—è –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –ø–æ —á–∏—Å–ª—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω)"
    )

    def __str__(self):
        return self.title

class Teacher(models.Model):
    full_name = models.CharField(max_length=200)
    user = models.OneToOneField(           # üëà –ù–û–í–û–ï
        User, on_delete=models.SET_NULL,
        null=True, blank=True,
        related_name="teacher_profile"
    )

    def __str__(self):
        return self.full_name

class StudentGroup(models.Model):
    code = models.CharField(max_length=50, unique=True)  # –Ω–∞–ø—Ä–∏–º–µ—Ä –ò–°–ü-31
    size = models.PositiveIntegerField(default=0)        # –∫–æ–ª-–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    department = models.CharField(max_length=120, blank=True)  # –∑–¥–∞–Ω–∏–µ/–æ—Ç–¥–µ–ª–µ–Ω–∏–µ

    def __str__(self):
        return self.code

class TeacherWorkload(models.Model):
    teacher = models.OneToOneField(Teacher, on_delete=models.CASCADE, related_name="workload")
    weekly_hours_limit = models.PositiveSmallIntegerField(default=36)  # –Ω–∞–ø—Ä–∏–º–µ—Ä
    # —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π –±–µ–∑ —Ä–∞–±–æ—Ç—ã (0-–ø–Ω ... 6-–≤—Å), —Ö—Ä–∞–Ω–∏–º —Å—Ç—Ä–æ–∫–æ–π CSV –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã MVP: "5,6"
    days_off = models.CharField(max_length=20, blank=True)
    # –æ–∫–Ω–æ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–∞ –¥–µ–Ω—å)
    default_start = models.TimeField(null=True, blank=True)
    default_end = models.TimeField(null=True, blank=True)

class TeacherDayOverride(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE, related_name="day_overrides")
    date = models.DateField()
    is_off = models.BooleanField(default=False)
    start = models.TimeField(null=True, blank=True)
    end = models.TimeField(null=True, blank=True)

    class Meta:
        unique_together = ("teacher", "date")

class GroupDisciplinePlan(models.Model):
    group = models.ForeignKey(StudentGroup, on_delete=models.CASCADE, related_name="plans")
    discipline = models.ForeignKey(Discipline, on_delete=models.CASCADE)
    hours_total = models.PositiveSmallIntegerField()  # –≤—Å–µ–≥–æ —á–∞—Å–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
    hours_assigned = models.PositiveSmallIntegerField(default=0)

    class Meta:
        unique_together = ("group", "discipline")

class TeachingAssignment(models.Model):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤–µ–¥—ë—Ç –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É —É –≥—Ä—É–ø–ø—ã."""
    group = models.ForeignKey(StudentGroup, on_delete=models.CASCADE, related_name="assignments")
    discipline = models.ForeignKey(Discipline, on_delete=models.CASCADE, related_name="assignments")
    teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE, related_name="assignments")

    class Meta:
        unique_together = ("group", "discipline", "teacher")

    def __str__(self):
        return f"{self.group} ¬∑ {self.discipline} ‚Üí {self.teacher}"

class Holiday(models.Model):
    """–ù–µ—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å/–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ."""
    date = models.DateField(unique=True)
    title = models.CharField(max_length=200, blank=True)
    is_working = models.BooleanField(default=False)  # true = –≤—Å—ë-—Ç–∞–∫–∏ —Ä–∞–±–æ—á–∏–π (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ)

    def __str__(self):
        return f"{self.date} {'(—Ä–∞–±.)' if self.is_working else '(–≤—ã—Ö–æ–¥–Ω–æ–π)'} {self.title}"

class BuildingPriority(models.Model):
    """
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–æ—Ä–ø—É—Å–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã/–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.
    –ß–µ–º –ú–ï–ù–¨–®–ï priority, —Ç–µ–º –í–´–®–ï –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0 ‚Äî —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π).
    """
    group = models.ForeignKey("StudentGroup", on_delete=models.CASCADE, related_name="building_prefs")
    discipline = models.ForeignKey(Discipline, on_delete=models.CASCADE, related_name="building_prefs")
    building = models.ForeignKey("Building", on_delete=models.CASCADE)
    priority = models.PositiveSmallIntegerField(default=0)

    class Meta:
        unique_together = ("group", "discipline", "building")
        ordering = ["priority", "building__name"]

    def __str__(self):
        return f"{self.group.code} ¬∑ {self.discipline.title} ‚Üí {self.building.name} (#{self.priority})"